use ast::{Number, Expr, Opcode, TErrorRecovery};
use rug::{Integer, Float};

grammar<'err>(errors: &'err mut Vec<TErrorRecovery<'input>>);

pub Exprs = Comma<Expr>;

Comma<T>: Vec<T> = {
    <v:(<T> ",")*> <e:T?> => match e { // (1)
        None=> v,
        Some(e) => {
            let mut v = v;
            v.push(e);
            v
        }
    }
};

Tier<Op,NextTier>: Box<Expr> = {
    Tier<Op,NextTier> Op NextTier => Box::new(Expr::Op(<>)),
    NextTier
};

pub Expr = Tier<ExprOp, Factor>;
Factor = Tier<FactorOp, Term>;

ExprOp: Opcode = {
    "+" => Opcode::Add,
    "-" => Opcode::Sub,
};

FactorOp: Opcode = {
    "*" => Opcode::Mul,
    "/" => Opcode::Div,
};

Term: Box<Expr> = {
    Num => Box::new(Expr::Number(<>)),
    "(" <Expr> ")",
    "[" <Expr> "]",
    <o:Term> "(" <i:Term> ")" => Box::new(Expr::Op(o, Opcode::Mul, i)),
    ! => { errors.push(<>); Box::new(Expr::Error) },
};

Num: Number = {
    Float => Number::Float(<>),
    Int => Number::Int(<>),
};

Int: Integer = {
    r"0b[01_]+" => Integer::from_str_radix(&(<>)[2..], 2).unwrap(),
    r"0x[0-9A-Fa-f_]+" => Integer::from_str_radix(&(<>)[2..], 16).unwrap(),
    r"[0-9A-Fa-f_]+h" => Integer::from_str_radix(&(<>)[..<>.len()-1], 16).unwrap(),
    r"-?[0-9_]+" => Integer::from_str_radix(<>, 10).unwrap()
};

Float: Float = {
    r"-?\.[0-9_]+" => Float::with_val(53, Float::parse(<>).unwrap()),
    r"-?[0-9_]+\.[0-9_]+" => Float::with_val(53, Float::parse(<>).unwrap())
};
