use std::str::FromStr;
use ast::{Number, Expr, Opcode, ParseError};
use rug::{Integer, Float};

grammar<'err>(errors: &'err mut Vec<ParseError<'input>>);

pub Exprs = Comma<Expr>;

Comma<T>: Vec<T> = {
    <v:(<T> ",")*> <e:T?> => match e { // (1)
        None=> v,
        Some(e) => {
            let mut v = v;
            v.push(e);
            v
        }
    }
};

Tier<Op,NextTier>: Box<Expr> = {
    Tier<Op,NextTier> Op NextTier => Box::new(Expr::Op(<>)),
    NextTier
};

Expr = Tier<ExprOp, Factor>;
Factor = Tier<FactorOp, Term>;

ExprOp: Opcode = {
    "+" => Opcode::Add,
    "-" => Opcode::Sub,
};

FactorOp: Opcode = {
    "*" => Opcode::Mul,
    "/" => Opcode::Div,
};

Term: Box<Expr> = {
    Num => Box::new(Expr::Number(<>)),
    "(" <Expr> ")",
    ! => { errors.push(<>); Box::new(Expr::Error) },
};

Num: Number = {
    Float => Number::Float(<>),
    Int => Number::Int(<>),
};

Int: Integer = {
    r"[0-9]+" => Integer::from_str_radix(<>, 10).unwrap()
};

Float: Float = {
    r"[0-9]+\.[0-9]+" => Float::with_val(32, Float::parse(<>).unwrap())
};
