use ast::{Number, Expr, Opcode, TErrorRecovery};
use rug::{Integer, Float};

grammar<'err>(errors: &'err mut Vec<TErrorRecovery<'input>>);

pub Exprs = Comma<Expr>;

Comma<T>: Vec<T> = {
    <v:(<T> ",")*> <e:T?> => match e {
        None=> v,
        Some(e) => {
            let mut v = v;
            v.push(e);
            v
        }
    }
};

// Tier4
pub Expr = {
    <l:Expr> "<<" <r:Tier3> => Box::new(Expr::Op(l, Opcode::Shl, r)),
    <l:Expr> ">>" <r:Tier3> => Box::new(Expr::Op(l, Opcode::Shr, r)),
    Tier3,
};


pub Tier3 = {
    <l:Tier3> "-" <r:Tier2> => Box::new(Expr::Op(l, Opcode::Sub, r)),
    <l:Tier3> "+" <r:Tier2> => Box::new(Expr::Op(l, Opcode::Add, r)),
    Tier2,
};

Tier2 = {
    <l:Tier2> "*" <r:Tier1> => Box::new(Expr::Op(l, Opcode::Mul, r)),
    <o:Tier2> "(" <i:Tier1> ")" => Box::new(Expr::Op(o, Opcode::Mul, i)),
    <l:Tier2> "/" <r:Tier1> => Box::new(Expr::Op(l, Opcode::Div, r)),
    Tier1,
};

Tier1 = {
    <l:Tier1> "**" <r:Term> => Box::new(Expr::Op(l, Opcode::Pow, r)),
    Term,
}

Term: Box<Expr> = {
    Num => Box::new(Expr::Number(<>)),
    "(" <Expr> ")",
    "[" <Expr> "]",
    "#" => Box::new(Expr::Prev),
    ! => { errors.push(<>); Box::new(Expr::Error) },
};

Num: Number = {
    Float => Number::Float(<>),
    Int => Number::Int(<>),
};

Int: Integer = {
    r"0b[01_]+" => Integer::from_str_radix(&(<>)[2..], 2).unwrap(),
    r"0x[0-9A-Fa-f_]+" => Integer::from_str_radix(&(<>)[2..], 16).unwrap(),
    r"[0-9A-Fa-f_]+h" => Integer::from_str_radix(&(<>)[..<>.len()-1], 16).unwrap(),
    r"-?[0-9_]+" => Integer::from_str_radix(<>, 10).unwrap()
};

Float: Float = {
    r"-?\.[0-9_]+" => Float::with_val(53, Float::parse(<>).unwrap()),
    r"-?[0-9_]+\.[0-9_]+" => Float::with_val(53, Float::parse(<>).unwrap())
};
