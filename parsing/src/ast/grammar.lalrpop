use crate::ast::{self, Node, TErrorRecovery};
use crate::token::{Token};

grammar<'input, 'err>(errors: &'err mut Vec<TErrorRecovery<'input>>);

Sep<T, S>: Vec<T> = {
    <v:(<T> S)*> <e:T?> => match e {
        None=> v,
        Some(e) => {
            let mut v = v;
            v.push(e);
            v
        }
    }
};


extern {
    type Location = usize;
    type Error = ast::Error;

    enum Token<'input> {
        "ident" => Token::Ident(<&'input str>),
        "str literal" => Token::StringLit(<&'input str>),
        "int literal" => Token::Integer(<rug::Integer>),
        "float literal" => Token::Float(<rug::Float>),

        "operator" => Token::Operator(<&'input str>),

        "let" => Token::Let,
        "fn" => Token::Fun,
        "#" => Token::Prev,

        "," => Token::Comma,
        ";" => Token::Semicolon,
        "=" => Token::Equals,

        "(" => Token::LParen,
        ")" => Token::RParen,
        "[" => Token::LBracket,
        "]" => Token::RBracket,
        "{" => Token::LBrace,
        "}" => Token::RBrace,
        "<" => Token::LAngleBracket,
        ">" => Token::RAngleBracket,
    }
}

Integer: Node = "int literal" => Node::Number(<>.into());
Float: Node = "float literal" => Node::Number(<>.into());

Number = {
    Integer,
    Float,
};

String: Node = "str literal" => Node::String(<>.into());

pub Node: Node = {
    InfixExpr,

    ! => {
        errors.push(<>);
        Node::Error
    }   
};

InfixExpr: Node = {
    <lhs:InfixExpr> <op:"operator"> <rhs:PrimaryExpr> =>
        Node::Infix {
            lhs: Box::new(lhs),
            op: op.to_string(),
            rhs: Box::new(rhs)
        },
    <lhs:InfixExpr> "(" <rhs:PrimaryExpr> ")" =>
        Node::Infix {
            lhs: Box::new(lhs),
            op: "*".to_string(),
            rhs: Box::new(rhs)
        },
    PrimaryExpr,
};

LetBinding: Node = {
    "let" <ident:"ident"> "=" <val:PrimaryExpr> => Node::Let(ident.to_owned(), Box::new(val)),
};

FunctionDef: Node = {
    "fn" <name:"ident"> "<" <params: Sep<"ident", ",">> ">" "{" <body: Sep<Node, ";">> "}"  => Node::FunctionDef {
        name: name.to_string(),
        params: params.iter().map(|p| p.to_string()).collect(),
        body,
    },
};

FunctionCall: Node = {
    <name:"ident"> "<" <args: Sep<Node, ",">> ">" => Node::FunctionCall {
        name: name.to_string(),
        args,
    }
}

Ident: Node = {
    "ident" => Node::Ident(<>.to_string()),
};

PrimaryExpr: Node = {
    "(" <Node> ")" => <>,
    "[" <Node> "]" => <>,

    LetBinding,
    FunctionCall,
    FunctionDef,

    "#" => Node::Prev,
    Ident,
    String,
    Number,
};

pub Nodes = Sep<Node, ";">;