// Ident
ident_char = { ASCII_ALPHA | ASCII_DIGIT | "_" }
ident_start = { ASCII_ALPHA | "_" }

ident = @{ ident_start ~ ident_char* }

// Numbers
// NOTE: All numbers are parsed as positive
// Sign is determined by the reparser
digit = _{ ASCII_DIGIT | "_" }

// Integer
hex_digit = _{ ASCII_HEX_DIGIT | "_" }
hex_int =  { (hex_digit+ ~ "h") | "0x" ~ hex_digit+ }

binary_int = { "0b" ~ ("0" | "1")+ }

decimal_int = { digit+ }

integer = { hex_int | binary_int | decimal_int}

// Float
float = { digit* ~ "." ~ digit* }

number = _{ float | integer }

// Operator
operator = { "+" | "-" | "**" | "*" | "/" | "!" | "%" }

// Keyword
keyword = { "let" | "fn" | "#" }

symbol = { "=" }


grouping_char = { "(" | ")" | "[" | "]" | "{" | "}" | "<" | ">" }

token = _{ keyword | symbol | number | ident | operator | grouping_char }

seperator = { " " | "," | ";" | NEWLINE }

token_list = { SOI ~ token ~ (seperator* ~ token)* ~ NEWLINE*? ~ EOI }